#!/usr/bin/env ruby
require 'fileutils'
require 'yaml'

class Config
  attr_reader :config
  attr_writer :file

  def initialize
    @file = File.new Dir.home, '.fossget'

    if exist?
      @config = load
    else
      @config = Hash.new
    end
  end

  def exist?
    File.exist? file
  end

  def load
    YAML.load_file file
  end

  def dir
    File.expand_path @config[:dirpath]
  end

  def dir= dirpath
    @config[:dirpath] = dirpath
  end

  def file
    File.expand_path @file
  end

  def repo
    File.expand_path @config[:repopath]
  end

  def repo= repopath
    @config[:repopath] = repopath
  end

  def user
    @config[:username]
  end

  def user= username
    @config[:username] = username
  end
end

usage_text = 'USAGE: fossget <COMMAND> [ARGUMENTS]'

help_text = <<-EOF.gsub /^  /, ''
  COMMANDS:

      help      Display this help text.

      config    Perform initial configuration of defaults.

                This provides a guided process for configuring user defaults,
                including FossRec username, the directory where you store
                Fossil repository files, the directory where you store Fossil
                project checkout directories, whether to use the same password
                for a repository's local username as for the FossRec username
                used to clone the repository

      clone clone <PROJECT> [PATH]

                Clone a repository from FossRec.

                PROJECT:  Specify the project name.
                PATH:     Optionally, specify a nonstandard checkout path.
EOF

else_text = 'Please provide a valid command.  Try "fossget help".'

config = Config.new

def print_config
  @config.keys.each do |key|
    puts "  #{key}: #{@config[key]}"
  end
end

def get_boolean question_text
  boolean = String.new

  until boolean.match /^[yn]$/
    print "#{question_text} [y/n]: "
    boolean = gets.chomp
  end

  boolean
end

def confirm_config question_text
  get_boolean(question_text).tap do |continue|
    unless continue.match /ye?s?/
      puts 'Configuration aborted.  No changes have been made.'
      exit
    end
  end
end

case ARGV.shift
when 'help'
  puts
  puts usage_text
  puts
  puts help_text
  puts
when 'config'
  if @config.keys.size > 0
    puts 'This is your current saved config:'
    print_config
    puts 'This operation will overwrite your current saved config.'
    confirm_reconfig
  end

  puts 'Provide each of the following values to configure fossget defaults.'
  puts

  print 'FossRec Username: '
  @config[:username] = gets.chomp

  print 'Local Repository Directory: '
  @config[:repopath] = gets.chomp

  print 'Local Checkout Directory: '
  @config[:dirpath] = gets.chomp

  @config[:samepass] = get_boolean 'Use FossRec Password Locally'

  puts 'This is your new configuration.'
  print_config

  reasonable = get_boolean 'Do you want to save this config?'

  case reasonable
  when 'y'
    File.open("#{Dir.home}/.fossget", 'w') {|f| f.write @config.to_yaml }
    puts 'Configuration saved.'
  when 'n'
    puts 'Configuration aborted.  No changes have been made.'
  end
when 'clone'
  user = 'ren'
  repo_path = "#{Dir.home}/fossrec/repos/"
  dir_path = "#{Dir.home}/fossrec/"
  project = ARGV.shift
  repo_file = project + ".fossil"
  repo_file_path = File.join repo_path, repo_file
  clone_path = "https://#{user}@fossrec.com/u/apotheon/#{project}/index.cgi"
  checkout_path = (ARGV.shift or File.join dir_path, project)
  clone_cmd = "fossil clone #{clone_path} #{repo_file_path}"
  pass_cmd = "fossil user password #{user} -R #{repo_file_path}"
  open_cmd = "fossil open #{repo_file_path}"

  puts checkout_path
  system clone_cmd
  system pass_cmd

  FileUtils.mkdir checkout_path
  FileUtils.cd checkout_path
  system open_cmd
else
  puts usage_text
  puts else_text
end
