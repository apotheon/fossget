#!/usr/bin/env ruby
require 'fossget/cli'
require 'fossget/config'
require 'fileutils'

@config = Config.new

def print_config
  config.keys.each do |key|
    puts "  #{key}: #{@config[key]}"
  end
end

def get_boolean question_text
  boolean = String.new

  until boolean.match /^[yn]$/
    print "#{question_text} [y/n]: "
    boolean = gets.chomp
  end

  boolean
end

def confirm_config question_text
  get_boolean(question_text).tap do |continue|
    unless continue.match /ye?s?/
      puts 'Configuration aborted.  No changes have been made.'
      exit
    end
  end
end

def update_db repo_file_path, table, datum, filter
  `sqlite3 #{repo_file_path} "update #{table} set #{datum} where #{filter}"`
end

def update_user repo_file_path, field, value, user
  update_db repo_file_path, 'user', "#{field}='#{value}'", "login='#{user}'"
end

def set_user_info repo_file_path, new_info, user
  update_user repo_file_path, 'info', new_info, user
end

case ARGV.shift
when 'help'
  puts
  puts CLI.usage_text
  puts
  puts CLI.help_text
  puts
when 'config'
  if @config.keys.size > 0
    puts 'This is your current saved config:'
    print_config
    puts 'This operation will overwrite your current saved config.'
    confirm_reconfig
  end

  puts 'Provide each of the following values to configure fossget defaults.'
  puts

  print 'FossRec Username: '
  @config.user = gets.chomp

  print 'FossRec User Info: '
  @config.info = gets.chomp

  print 'Local Repository Directory: '
  @config.repo = gets.chomp

  print 'Local Checkout Directory: '
  @config.dir = gets.chomp

  @config.samepass = get_boolean 'Use FossRec Password Locally'

  puts 'This is your new configuration.'
  print_config

  reasonable = get_boolean 'Do you want to save this config?'

  case reasonable
  when 'y'
    @config.save
    puts 'Configuration saved.'
  when 'n'
    puts 'Configuration aborted.  No changes have been made.'
  end
when 'clone'
  user = 'ren'
  repo_path = "#{Dir.home}/fossrec/repos/"
  dir_path = "#{Dir.home}/fossrec/"
  project = ARGV.shift
  repo_file = project + ".fossil"
  repo_file_path = File.join repo_path, repo_file
  clone_path = "https://#{user}@fossrec.com/u/apotheon/#{project}/index.cgi"
  checkout_path = (ARGV.shift or File.join dir_path, project)
  clone_cmd = "fossil clone #{clone_path} #{repo_file_path}"
  pass_cmd = "fossil user password #{user} -R #{repo_file_path}"
  open_cmd = "fossil open #{repo_file_path}"

  puts checkout_path
  system clone_cmd
  system pass_cmd

  if @config.info
    set_user_info repo_file_path, @config.info, user
  end

  FileUtils.mkdir checkout_path
  FileUtils.cd checkout_path
  system open_cmd
else
  puts CLI.usage_text
  puts CLI.else_text
end
